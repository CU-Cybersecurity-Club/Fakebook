---
- name: server provisioning playbook
  hosts: all
  remote_user: "{{ ansible_ssh_user }}"

  tasks:
  - name: install packages
    apt:
      force: yes
      pkg: fail2ban,unattended-upgrades,logwatch,iptables-persistent,nginx,git,python3,python-pip,python3-pip,python3-setuptools,software-properties-common,sqlite3
    become: yes

  ###
  ### USERS
  ###
  - name: add user www-data
    become: yes
    user:
      name: www-data
      shell: /usr/sbin/nologin
      append: yes

  - name: give correct permissions to Ansible user
    become: yes
    user:
      name: flask
      groups: flask,www-data

  ###
  ### GENERIC SECURITY PROVISIONING
  ###
  # ssh configuration
  - name: update SSH config
    become: yes
    template:
      src: ./config/misc/sshd_config.j2
      dest: /etc/ssh/sshd_config
    notify:
      - restart ssh

  # logwatch configuration
  - name: enable sending logs to domain admin
    become: yes
    lineinfile:
      dest: /etc/cron.daily/00logwatch
      backrefs: yes
      regexp: "^/usr/sbin/logwatch .*$"
      line: "/usr/sbin/logwatch --output /var/log/logwatch.log --detail high"

  # unattended-upgrades configuration
  - name: configure instance to update automatically
    template:
      src: ./config/misc/apt.10periodic.j2
      dest: /etc/apt/apt.conf.d/10periodic
    notify:
      - restart unattended-upgrades

  - name: install security updates automatically with unattended-upgrades
    template:
      src: ./config/misc/apt.50unattended-upgrades.j2
      dest: /etc/apt/apt.conf.d/50unattended-upgrades
    notify:
      - restart unattended-upgrades

  # fail2ban configuration
  - name: configure Fail2Ban for ssh
    template:
      src: ./config/misc/fail2ban.sshd.local.j2
      dest: /etc/fail2ban/jail.d/sshd.local
    notify:
      - restart fail2ban

  # firewall
  - name: set up iptables firewall (IPv4)
    template:
      src: ./config/misc/firewall.j2
      dest: /etc/iptables/rules.v4
    notify:
      - restart iptables

  ###
  ### WEBSERVER PROVISIONING
  ###
  - name: give permissions for /var/www to www-data
    become: yes
    file:
      path: /var/www
      owner: www-data
      group: www-data
      mode: '0775'

  # nginx configuration
  - name: add nginx.conf to /etc/nginx
    become: yes
    template:
      src: ./config/nginx/nginx.conf.j2
      dest: /etc/nginx/nginx.conf

  - name: add nginx server config to nginx sites-available
    become: yes
    template:
      src: ./config/nginx/webserver.nginx.j2
      dest: "/etc/nginx/sites-available/{{ host }}"
    notify:
      - restart nginx

  - name: add default config to route http to https
    become: yes
    template:
      src: ./config/nginx/default.nginx.j2
      dest: /etc/nginx/sites-available/default
    notify:
      - restart nginx

  - name: add symlink to nginx sites-enabled
    become: yes
    file:
      src: "/etc/nginx/sites-available/{{ host }}"
      dest: "/etc/nginx/sites-enabled/{{ host }}"
      state: link
    notify:
      - restart nginx

  - name: add symlink to default
    become: yes
    file:
      src: "/etc/nginx/sites-available/default"
      dest: "/etc/nginx/sites-enabled/default"
      state: link
    notify:
      - restart nginx

  # Configure gunicorn
  - name: install gunicorn service
    become: yes
    template:
      src: ./config/gunicorn/gunicorn.service.j2
      dest: "/etc/systemd/system/gunicorn-{{ host }}.service"
    notify:
      - restart gunicorn

  - name: make gunicorn start on boot
    become: yes
    service:
      name: "gunicorn-{{ host }}"
      enabled: yes

  - name: add /etc/gunicorn.d
    become: yes
    file:
      path: /etc/gunicorn.d
      state: directory
  
  - name: add gunicorn configuration
    become: yes
    template:
      src: ./config/gunicorn/gunicorn.py.j2
      dest: /etc/gunicorn.d/gunicorn.py

  # Update code and configuration from repository
  - name: download code from repository
    become: yes
    become_user: www-data
    git:
      repo: "{{ repo }}"
      dest: "/var/www/{{ host }}"
      version: "{{ branch | default('HEAD') }}"
      depth: 1
      force: yes

  - name: install virtualenv via pip
    become: yes
    pip:
      name: virtualenv
      executable: pip3

  - name: update Python virtual environment
    become: yes
    become_user: www-data
    pip:
      virtualenv: "/var/www/{{ host }}/virtualenv"
      virtualenv_command: /usr/bin/python3.6 -m venv
      requirements: "/var/www/{{ host }}/requirements.txt"

  - name: add .env config file
    become: yes
    become_user: www-data
    template:
      src: ./config/gunicorn/webserver.env.j2
      dest: "/var/www/{{ host }}/.env"
    notify:
      - restart gunicorn

  # Install certbot for use with Let's Encrypt
  - name: add certbot apt repository
    become: yes
    apt_repository:
      repo: ppa:certbot/certbot
      state: present

  - name: download certbot packages for use with nginx
    become: yes
    apt:
      force: yes
      pkg: certbot,python-certbot-nginx

  ###
  ### HANDLERS
  ###
  handlers:
  - name: restart fail2ban
    service:
      name: fail2ban
      state: restarted

  - name: restart unattended-upgrades
    service:
      name: unattended-upgrades
      state: restarted

  - name: restart ssh
    service:
      name: ssh
      state: restarted

  - name: restart iptables
    become: yes
    command: iptables-restore < /etc/iptables/rules.v4

  - name: restart nginx
    become: yes
    service:
      name: nginx
      state: restarted

  - name: restart gunicorn
    become: yes
    systemd:
      name: "gunicorn-{{ host }}"
      daemon_reload: yes
      enabled: yes
      state: restarted
...
